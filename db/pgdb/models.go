// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package pgdb

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type GenderT string

const (
	GenderTMale   GenderT = "male"
	GenderTFemale GenderT = "female"
	GenderTOther  GenderT = "other"
)

func (e *GenderT) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GenderT(s)
	case string:
		*e = GenderT(s)
	default:
		return fmt.Errorf("unsupported scan type for GenderT: %T", src)
	}
	return nil
}

type NullGenderT struct {
	GenderT GenderT `json:"gender_t"`
	Valid   bool    `json:"valid"` // Valid is true if GenderT is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGenderT) Scan(value interface{}) error {
	if value == nil {
		ns.GenderT, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GenderT.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGenderT) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GenderT), nil
}

type RolesT string

const (
	RolesTDoctor RolesT = "doctor"
	RolesTAdmin  RolesT = "admin"
	RolesTUser   RolesT = "user"
)

func (e *RolesT) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RolesT(s)
	case string:
		*e = RolesT(s)
	default:
		return fmt.Errorf("unsupported scan type for RolesT: %T", src)
	}
	return nil
}

type NullRolesT struct {
	RolesT RolesT `json:"roles_t"`
	Valid  bool   `json:"valid"` // Valid is true if RolesT is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRolesT) Scan(value interface{}) error {
	if value == nil {
		ns.RolesT, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RolesT.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRolesT) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RolesT), nil
}

type Appointment struct {
	ID        int64              `json:"id"`
	UsersID   int64              `json:"users_id"`
	DoctorID  int64              `json:"doctor_id"`
	Name      string             `json:"name"`
	Phone     string             `json:"phone"`
	Gender    GenderT            `json:"gender"`
	Age       string             `json:"age"`
	Address   string             `json:"address"`
	Date      string             `json:"date"`
	Time      string             `json:"time"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Category struct {
	ID           int64              `json:"id"`
	CategoryName string             `json:"category_name"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

type Doctor struct {
	ID         int64              `json:"id"`
	CategoryID int64              `json:"category_id"`
	Name       string             `json:"name"`
	Email      string             `json:"email"`
	Phone      string             `json:"phone"`
	Password   string             `json:"password"`
	Gender     GenderT            `json:"gender"`
	Dob        string             `json:"dob"`
	Img        pgtype.Text        `json:"img"`
	Shedule    string             `json:"shedule"`
	Degree     string             `json:"degree"`
	Address    string             `json:"address"`
	Roles      RolesT             `json:"roles"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

type User struct {
	ID        int64              `json:"id"`
	Name      string             `json:"name"`
	Email     string             `json:"email"`
	Password  string             `json:"password"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}
