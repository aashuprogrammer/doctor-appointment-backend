// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: doctors.sql

package pgdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDoctor = `-- name: CreateDoctor :one
INSERT INTO doctors(name,email,phone,password,gender,dob,img,shedule,degree,address,roles,category_id)
VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)
RETURNING id, category_id, name, email, phone, password, gender, dob, img, shedule, degree, address, roles, created_at
`

type CreateDoctorParams struct {
	Name       string      `json:"name"`
	Email      string      `json:"email"`
	Phone      string      `json:"phone"`
	Password   string      `json:"password"`
	Gender     GenderT     `json:"gender"`
	Dob        string      `json:"dob"`
	Img        pgtype.Text `json:"img"`
	Shedule    string      `json:"shedule"`
	Degree     string      `json:"degree"`
	Address    string      `json:"address"`
	Roles      RolesT      `json:"roles"`
	CategoryID int64       `json:"category_id"`
}

func (q *Queries) CreateDoctor(ctx context.Context, arg CreateDoctorParams) (Doctor, error) {
	row := q.db.QueryRow(ctx, createDoctor,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Password,
		arg.Gender,
		arg.Dob,
		arg.Img,
		arg.Shedule,
		arg.Degree,
		arg.Address,
		arg.Roles,
		arg.CategoryID,
	)
	var i Doctor
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.Gender,
		&i.Dob,
		&i.Img,
		&i.Shedule,
		&i.Degree,
		&i.Address,
		&i.Roles,
		&i.CreatedAt,
	)
	return i, err
}
