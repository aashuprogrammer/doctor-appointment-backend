// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category.sql

package pgdb

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO category(category_name)
VALUES ($1)
RETURNING id, category_name, created_at
`

func (q *Queries) CreateCategory(ctx context.Context, categoryName string) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, categoryName)
	var i Category
	err := row.Scan(&i.ID, &i.CategoryName, &i.CreatedAt)
	return i, err
}

const getAllCategory = `-- name: GetAllCategory :many
SELECT id, category_name, created_at FROM category
`

func (q *Queries) GetAllCategory(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, getAllCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.CategoryName, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
