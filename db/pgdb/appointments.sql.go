// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: appointments.sql

package pgdb

import (
	"context"
)

const createAppointment = `-- name: CreateAppointment :one
INSERT INTO appointments(users_id,doctor_id,name,phone,gender,age,date,time,address)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9)
RETURNING id, users_id, doctor_id, name, phone, gender, age, address, date, time, created_at
`

type CreateAppointmentParams struct {
	UsersID  int64   `json:"users_id"`
	DoctorID int64   `json:"doctor_id"`
	Name     string  `json:"name"`
	Phone    string  `json:"phone"`
	Gender   GenderT `json:"gender"`
	Age      string  `json:"age"`
	Date     string  `json:"date"`
	Time     string  `json:"time"`
	Address  string  `json:"address"`
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, createAppointment,
		arg.UsersID,
		arg.DoctorID,
		arg.Name,
		arg.Phone,
		arg.Gender,
		arg.Age,
		arg.Date,
		arg.Time,
		arg.Address,
	)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.UsersID,
		&i.DoctorID,
		&i.Name,
		&i.Phone,
		&i.Gender,
		&i.Age,
		&i.Address,
		&i.Date,
		&i.Time,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAppointment = `-- name: DeleteAppointment :exec
DELETE FROM appointments
WHERE id = $1 and users_id=$2
`

type DeleteAppointmentParams struct {
	ID      int64 `json:"id"`
	UsersID int64 `json:"users_id"`
}

func (q *Queries) DeleteAppointment(ctx context.Context, arg DeleteAppointmentParams) error {
	_, err := q.db.Exec(ctx, deleteAppointment, arg.ID, arg.UsersID)
	return err
}

const getAllAppointment = `-- name: GetAllAppointment :many
SELECT id, users_id, doctor_id, name, phone, gender, age, address, date, time, created_at FROM appointments
Order by Created_at desc
`

func (q *Queries) GetAllAppointment(ctx context.Context) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, getAllAppointment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Appointment{}
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.UsersID,
			&i.DoctorID,
			&i.Name,
			&i.Phone,
			&i.Gender,
			&i.Age,
			&i.Address,
			&i.Date,
			&i.Time,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAppointmentDetails = `-- name: GetAppointmentDetails :one
SELECT a.name,a.phone,a.age,d.name as doctorName,d.shedule,u.name AS username
FROM appointments AS a
INNER JOIN doctors AS d on d.id=a.doctor_id
INNER JOIN users AS u on u.id=a.users_id
WHERE a.id =$1
`

type GetAppointmentDetailsRow struct {
	Name       string `json:"name"`
	Phone      string `json:"phone"`
	Age        string `json:"age"`
	Doctorname string `json:"doctorname"`
	Shedule    string `json:"shedule"`
	Username   string `json:"username"`
}

func (q *Queries) GetAppointmentDetails(ctx context.Context, id int64) (GetAppointmentDetailsRow, error) {
	row := q.db.QueryRow(ctx, getAppointmentDetails, id)
	var i GetAppointmentDetailsRow
	err := row.Scan(
		&i.Name,
		&i.Phone,
		&i.Age,
		&i.Doctorname,
		&i.Shedule,
		&i.Username,
	)
	return i, err
}

const getDoctorAppointment = `-- name: GetDoctorAppointment :many
SELECT id, users_id, doctor_id, name, phone, gender, age, address, date, time, created_at FROM appointments
WHERE doctor_id = $1 AND  Created_at<now()-INTERVAL '1 day'
`

func (q *Queries) GetDoctorAppointment(ctx context.Context, doctorID int64) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, getDoctorAppointment, doctorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Appointment{}
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.UsersID,
			&i.DoctorID,
			&i.Name,
			&i.Phone,
			&i.Gender,
			&i.Age,
			&i.Address,
			&i.Date,
			&i.Time,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const myAppointment = `-- name: MyAppointment :many
SELECT id, users_id, doctor_id, name, phone, gender, age, address, date, time, created_at FROM appointments
WHERE users_id = $1
`

func (q *Queries) MyAppointment(ctx context.Context, usersID int64) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, myAppointment, usersID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Appointment{}
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.UsersID,
			&i.DoctorID,
			&i.Name,
			&i.Phone,
			&i.Gender,
			&i.Age,
			&i.Address,
			&i.Date,
			&i.Time,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const seeAllAppointmentByDoctorId = `-- name: SeeAllAppointmentByDoctorId :many
SELECT id, users_id, doctor_id, name, phone, gender, age, address, date, time, created_at FROM appointments
WHERE doctor_id=$1
`

func (q *Queries) SeeAllAppointmentByDoctorId(ctx context.Context, doctorID int64) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, seeAllAppointmentByDoctorId, doctorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Appointment{}
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.UsersID,
			&i.DoctorID,
			&i.Name,
			&i.Phone,
			&i.Gender,
			&i.Age,
			&i.Address,
			&i.Date,
			&i.Time,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const seeAllAppointmentByUserId = `-- name: SeeAllAppointmentByUserId :many
SELECT id, users_id, doctor_id, name, phone, gender, age, address, date, time, created_at FROM appointments
WHERE users_id=$1
`

func (q *Queries) SeeAllAppointmentByUserId(ctx context.Context, usersID int64) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, seeAllAppointmentByUserId, usersID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Appointment{}
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.UsersID,
			&i.DoctorID,
			&i.Name,
			&i.Phone,
			&i.Gender,
			&i.Age,
			&i.Address,
			&i.Date,
			&i.Time,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
